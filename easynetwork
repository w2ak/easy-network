#!/usr/bin/env python3
# vim: tw=0
import sys,os,argparse,json
import vpn

def argFuncs(f):
    def new_f(args):
        delattr(args,'func')
        return f(args)
    new_f.__name__ = f.__name__
    return new_f

def debugArgFuncs(f):
    def new_f(args):
        print('Entering {:}.'.format(f.__name__))
        r = f(args)
        print('Exitting {:}, with exit code {:d}.'.format(f.__name__,r))
        return r
    new_f.__name__ = f.__name__
    return new_f

@debugArgFuncs
@argFuncs
def vpn_create(args):
    print(args)
    return 0

def parserMethod(f):
    setattr(argparse.ArgumentParser, f.__name__, f)
    return None

@parserMethod
def add_truefalse(self, **kwargs):
    parser=self
    dest = kwargs['dest'] if 'dest' in kwargs else 'foo'
    default = kwargs['default'] if 'default' in kwargs else None
    option = kwargs['opt'] if 'opt' in kwargs else dest
    helpmessage = kwargs['help'] if 'help' in kwargs else None
    required = 'default' not in kwargs
    g = parser.add_mutually_exclusive_group(required=required)

    helpTrue = '(default)' if default==True else helpmessage
    helpFalse = '(default)' if default==False else helpmessage if default==True else None
    g.add_argument('--{:}'.format(option), dest=dest, action='store_true', help=helpTrue)
    g.add_argument('--no-{:}'.format(option), dest=dest, action='store_false', help=helpFalse)
    if not required:
        d = dict()
        d[dest] = default
        g.set_defaults(**d)

if __name__=='__main__':
    main = argparse.ArgumentParser(description='easynetwork helper tool')
    main_ = main.add_subparsers(title='subcommands')

    # rsa command
    main_rsa = main_.add_parser('rsa', help='easy-rsa commands', aliases=['r'])

    # vpn command
    main_vpn = main_.add_parser('vpn', help='openvpn commands', aliases=['v'])
    main_vpn_ = main_vpn.add_subparsers(title='action')

    ## vpn create
    main_vpn_create = main_vpn_.add_parser('create', help='create server', aliases=['new','c','n'])
    main_vpn_create.set_defaults(func=vpn_create)

    main_vpn_create.add_argument('name', help='User-side name of the vpn server.')                                                 ### user-side name
    main_vpn_create.add_truefalse(dest='crt', opt='crt-auth', default=True, help='Require certificate authentication')             ### crt auth ?
    main_vpn_create.add_truefalse(dest='pam', opt='pam-auth', default=False, help='Require pam authentication')                    ### pam auth ?
    main_vpn_create.add_truefalse(dest='key', opt='shared-key', default=False, help='Require the use of an additional shared key') ### shared key ?

    # argument parsing
    args = main.parse_args()
    print(args)
    try:
        args.func(args)
    except AttributeError:
        main.print_usage()
        sys.exit(1)
